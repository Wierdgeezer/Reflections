What happens when you initialize a repository? Why do you need to do it?
	Initialising a Repository creates a new .git directory at the bottom of your project directory. This is needed by git to record any changes to files throughout my project's lifecycle.

How is the staging area different from the working directory and the repository?
	The staging area does not hold complete files as the working directory does, nor does it record the files differences between versions as the repository does. It records the files names for as scratchpad entries prior to being added to the repository.

What value do you think it offers?
	It allows the files to be selected provisionally before being commited for logging within the repository.

How can you use the staging area to make sure you have one commit per logical change?
	The staging area allows you to add only those files you know are associated with a single logical change. Any others can be added after one logical change hasbeen committed. If you have made more than one logical change in the course of a file's development between commits you should ensure the commit notes show this. However you should avoid this and keep to one logical change per commit.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
	You may want to make experimental changes to a program or develop an upgrade whilst keeping the current versions development safe. You may want to start a parallel project - same but with a different language or platform. Labelling the branches will allow you to select a branch easily to commence work without changing other branches.

How do the diagrams help you visualize the branch structure?
	branch diagrams help to show at which point development diverges from the main (master path) for such things as bug fixes, new features etc.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
	Merge causes the the two specified branches to combine into a new one, replacing the currently checked out path by default. the branches are merged by interleaving commits from both branches in order of date.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
	Git's automatic merging is a lot quicker, using each commit on each branch to build a new set of files, interleaving each relevant commit by date. This won't always work where common text fragments have been modified on both branches. In this instance git will throw a merge error wgich will have to be manually resolved, possibly, with the participation of the other branch's contributor.

	Manual merges will not have the speed benefits of an automatic merge. There is also a high risk of introducing new errors while merging code. The resolution of these will also severely impact completion time.